<!-- Page Heading -->

<div class="row">
  <div class="col-xl-3 col-md-6 mb-4">
    <div class="card border-left-danger shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Patient</div>
            <div class="h5 mb-0 mt-3 font-weight-bold text-gray-800">{{name}}</div>
          </div>
           <div class="col-auto">
            <i class="fas fa-user fa-2x text-gray-300"></i>
          </div> 
        </div>
      </div>
    </div>
  </div>

  {{> dashboard/calendar}}

  <div class="col-xl-3 col-md-6 mb-4">
    <div class="card border-left-success shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-top">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-success text-uppercase mb-3">Manage</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"> Update Information  </div>     
          </div>
          <div class="col-auto" style="display: flex; flex-direction:column; align-items:flex-end;">         
              <button class="ml-3 mt-4 btn btn-outline-success"onclick="window.location.href='/calendar/update/{{patient}}'">Update</button> 
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6 mb-4">
    <div class="card border-left-info shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-top">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-info text-uppercase mb-3">Manage</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"> Upload Mood  </div>     
          </div>
          <div class="col-auto" style="display: flex; flex-direction:column; align-items:flex-end;"> 
            <input type="file"  id="file" class="inputfile file" data-id={{patient}}>
            <label for="file">
              <a class="ml-3 mt-4 btn btn-outline-info">Upload File</a> 
            </label>        
             
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<!-- Content Row -->
<div class="row">

{{> dashboard/mood}}
{{> dashboard/activities}}
</div>

<div class="row">
  {{>dashboard/weather}}

</div>

<script>

function CSVToArray( strData, strDelimiter ){
    // Check to see if the delimiter is defined. If not,
    // then default to comma.
    strDelimiter = (strDelimiter || ",");

    // Create a regular expression to parse the CSV values.
    var objPattern = new RegExp(
        (
            // Delimiters.
            "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

            // Quoted fields.
            "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

            // Standard fields.
            "([^\"\\" + strDelimiter + "\\r\\n]*))"
        ),
        "gi"
        );


    // Create an array to hold our data. Give the array
    // a default empty first row.
    var arrData = [];
    var headers = [];
    var headersFound = false;
    var headerIndex = 0;

    // Create an array to hold our individual pattern
    // matching groups.
    var arrMatches = null;


    // Keep looping over the regular expression matches
    // until we can no longer find a match.
    while (arrMatches = objPattern.exec( strData )){

        // Get the delimiter that was found.
        var strMatchedDelimiter = arrMatches[ 1 ];

        // Check to see if the given delimiter has a length
        // (is not the start of string) and if it matches
        // field delimiter. If id does not, then we know
        // that this delimiter is a row delimiter.
        if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter){

            // Since we have reached a new row of data,
            // add an empty row to our data array.
            arrData.push( {} );
            headersFound = true;
            headerIndex = 0;
        }

        var strMatchedValue;

        // Now that we have our delimiter out of the way,
        // let's check to see which kind of value we
        // captured (quoted or unquoted).
        if (arrMatches[ 2 ]){

            // We found a quoted value. When we capture
            // this value, unescape any double quotes.
            strMatchedValue = arrMatches[ 2 ].replace(new RegExp( "\"\"", "g" ),"\"");

        } else {

            // We found a non-quoted value.
            strMatchedValue = arrMatches[ 3 ];

        }


        // Now that we have our value string, let's add
        // it to the data array.
        if (!headersFound) {
          headers.push(strMatchedValue);
        } else {
          arrData[arrData.length -1][headers[headerIndex]] = strMatchedValue;
          headerIndex ++;
        }
    }

    // Return the parsed data.
    return( arrData );
}

  $(".file").change(function(){
    var file = this.files[0];
    var reader = new FileReader();
    var id= event.target.getAttribute('data-id');
    reader.addEventListener("load", function () {
      let json = CSVToArray(reader.result);
      console.log(json);
      json.pop();

       $.ajax({
        url: `/mood/${id}/update`,
        dataType: 'json',
        type: 'post',
        contentType: 'application/json',
        data: JSON.stringify(json),
        processData: false,
        }).done(function(res) {
            if (res.success) {
            
              console.log("success!!");
            
        } else {
            console.log('error...ajax');
            }
})
    }, false);

  if (file) {
    reader.readAsText(file);
  }
 });
</script>
